======
 前言
======

我的工作是在一家台灣的線上內容服務公司中，開發 Mac OS X 以及 iOS 軟體，在開發了前幾個版本之後，隨著公司業務擴張，我們需要更多的人力投入開發，公司也因此聘用了更多新進的軟體工程師。

雖然隨著近幾年 iPhone 暢銷，吸引不少人投入 iOS 開發，學習 Objective-C 語言，坊間關於 iOS 開發的書籍也絕對不算少。但由於 Obejctive C 語言並不是學校會教授的程式語言，在人力市場中流動的人才，還是很難找到經驗夠豐富，可以馬上投入工作的同事。

而一般入門書籍往往著重怎樣一步一步寫出第一個應用程式，照著範例讓程式可以動起來，但是我們需要的人才，要能夠面對一個已經好幾年的專案，知道怎樣將軟體愈寫愈大時，還能夠維持一套可以長久 maintain 的架構，因此也必須理解 Cocoa Framework 當中的慣例，以及 Objective-C 工程師應該怎麼想事情，在遇到怎樣的狀況時，可以有什麼作法，而什麼又是比較好的作法。

有個名詞可以統稱這些應對某些情況可以施展的招數，叫做 Design Pattern，關於 Design Pattern 的書籍也絕對不少，但 Design Pattern 絕不是讀過就算了，我們要知道怎樣在實戰中使用，或是至少知道，在面對蘋果提供的 Framework 時，哪個地方的設計其實用到了 Design Pattern。

Cocoa Framework 中其實大量使用 Design Pattern，但過去不怎麼強調，因為 Design Pattern 的使用多到幾乎無處不在，使用這些 Design Pattern 極其自然，似乎不需要特別指出哪邊用到了什麼 Design Pattern，官方文件中，也大概是在 Mac OS X 10.7 推出之後，才開始明確指出哪邊用了什麼 Desing Pattern 。可是，如果你不知道某些 pattern，例如 delegation，在你寫了第一個程式之後，想要繼續往下走，可說是舉步艱難。

軟體工程師真正在寫程式的時間往往不多，看問題，修 bug 的時間，遠遠超過實際寫程式的時間。一般可以看到的書籍，就我所看到，都沒有提到 debugger 怎麼使用，crash report 如何閱讀。說實在，很讓人不可思議。

也就是說，進入公司的新人，我們還是需要花上一段時間訓練，《我所知道的 Cocoa 兩三事》就是公司內部訓練教材的整理結果。這不是一本教你一步一步寫出 Mac OS X 與 iOS 軟體的教材，如果你是初學者，在閱讀下面提到的事情之前，建議可以先參考一些其他的入門書籍或文件，做一些其他練習。

我在這裡所列出的，是一些我覺得重要，但是在其他的讀物中比較不常提到的事，其他書中可以看到的，我可能就略過不講，我們的訓練過程中，也往往搭配其他書籍中的練習。

更重要的是，寫程式並不是一件孤獨的行為，也不光是照個一份教材摸索就夠了。

如果你想要成為 Mac OS X/iOS 工程師，你得要去認識同行，參加聚會，看看其他人做了什麼，怎麼做事；蘋果如果有最新的技術，也要馬上去閱讀最新的文件；多上 Twitter，國外的 Mac OS X/iOS 工程師多半都在 Twitter 上出沒。多閱讀，多寫 code，也多寫作，多交流—台北與高雄現在都有 Mac OS X 與 iOS 平台的工程師聚會，同時，更不要介意閱讀英文。

如果經濟狀況允許，又搶得到門票的話，去趟 WWDC 吧，作為這個平台的工程師，總是要去朝聖幾次的。

希望這份資料對你有幫助。

維中
